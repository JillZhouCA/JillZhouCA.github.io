<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Ubuntu 18.04 LTS 系统安装]]></title>
      <url>/2018/11/29/UbuntuInstallation/</url>
      <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>本人系统原来在Ubuntu 16.04 LTS, 后来头晕脑胀，点了升级，升级到 Ubuntu 18.04 LTS的过程中，本来一切还算顺利。但是可能存在configuration file的问题，一直报错。报错原因有：</p>
<ul>
<li>位于 /etc/modprobe.d/blacklist-nouveau.conf 里面，不知为何写的不是 “blacklist nouveau”，写的是 “blackout nouveau”。我由于不过脑子，不仔细阅读报错信息，一度改错。</li>
<li>进入了infinite login loop 的模式。受害者并非我一人，还有网上广大网友们。但是照着很多帖子改都无果。参见：<a href="https://blog.csdn.net/tjuyanming/article/details/79267984" target="_blank" rel="external">https://blog.csdn.net/tjuyanming/article/details/79267984</a></li>
</ul>
<p>不得不打开tty terminal (Ctrl + Alt + F2)，进行数据备份，U盘可以在 “/media/username/“里面找到。准备重装系统。</p>
<h2 id="Ubuntu系统重装盘准备工作"><a href="#Ubuntu系统重装盘准备工作" class="headerlink" title="Ubuntu系统重装盘准备工作"></a>Ubuntu系统重装盘准备工作</h2><pre><code>这个Ubuntu自己做了详细的介绍，无需参考任何别的资料，照着做： https://tutorials.ubuntu.com/tutorial/tutorial-create-a-usb-stick-on-windows#0
</code></pre><p>（<strong>Note:</strong> 这个是针对Windows的，针对Mac的也有，中文英文的貌似都有，如果你的U盘之前被用做过重装盘，被用过的盘的那一部分是不能直接被读取使用的，需要格式化。格式化的方法：<a href="https://www.sysgeek.cn/format-usb-drives-windows-10/" target="_blank" rel="external">https://www.sysgeek.cn/format-usb-drives-windows-10/</a> 由于我自己是用Windows电脑格式化的，我就用了diskpart, 别的电脑或许有别的格式化全盘的方法）</p>
<h2 id="开始重装"><a href="#开始重装" class="headerlink" title="开始重装"></a>开始重装</h2><p>准备好U盘后，重装非常简单。如果你的电脑有一开机就直接boot那个重装盘的设置，那就最好了，你就可以直接获取信息重装。我的电脑没有，因为之前有装好的系统，所以还是习惯性的boot系统。那么只要在开机的时候频繁按F12就可以了。按F12后选择boot安装U盘就好。</p>
<pre><code>接下来，就直接按照Ubuntu网上自己的安装指南安装就可以了：https://tutorials.ubuntu.com/tutorial/tutorial-install-ubuntu-desktop#0
</code></pre><p>（<strong>Note:</strong> 注意一下，我本来希望尽力保留电脑里面原来/home/ directory的东西，安装Ubuntu的时候，它检测得到我之前有ubuntu的系统，问我需不需要保留原系统的/home/文件的基础上再安装，这样就不用洗盘重装了。我第一次是选择了这个，然鹅。。装了整整24小时也没有结束，遂放弃之）</p>
<h2 id="安装Nvidia-driver-amp-pytorch（花了很多时间研究成功的步骤）"><a href="#安装Nvidia-driver-amp-pytorch（花了很多时间研究成功的步骤）" class="headerlink" title="安装Nvidia driver &amp; pytorch（花了很多时间研究成功的步骤）"></a>安装Nvidia driver &amp; pytorch（花了很多时间研究成功的步骤）</h2><p>由于做机器学习的相关工作，NVIDIA GPU加速对我而言很重要，原来的系统默认的是一个nouveau开源显卡程序，必须取代之。<br>以下命令都是在terminal中操作的：</p>
<ol>
<li>第一步，禁用nouveau:</li>
</ol>
<ul>
<li><p>首先要修改blacklist.conf (sudo vim /etc/modprobe.d/blacklist.conf):</p>
<blockquote><p>blacklist vga16fb<br>blacklist nouveau<br>blacklist rivafb<br>blacklist nvidiafb<br>blacklist rivatv</p>
</blockquote>
<p><strong>Note:</strong> 以上的blacklist列项需要添加在blacklist.conf文件的最后。这其中，我只理解要blacklist nouveau, 就是把nouveau加入到黑名单，其余的我不懂。</p>
</li>
<li><p>其次再修改blacklist-nouveau.conf（sudo vim /etc/modprobe.d/blacklist-nouveau.conf）:</p>
<blockquote><p>blacklist nouveau<br>blacklist lbm-nouveau<br>options nouveau modeset=0<br>alias nouveau off<br>alias lbm-nouveau off</p>
</blockquote>
<p><strong>Note:</strong> blacklist-nouveau.conf 原是没有的，这个是我自己创建的。文档里就写了上述内容。</p>
</li>
</ul>
<ol start="2">
<li><p>第二步，更新重启：<br>直接操作以下命令：</p>
<blockquote><p>sudo update-initramfs -u<br>reboot</p>
</blockquote>
<p><strong>Note</strong>: 以上皆是参照：<a href="https://blog.mahonex.com/index.php/2018/07/18/ubuntu-18-04-%E5%AE%89%E8%A3%85nvidia-%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/" target="_blank" rel="external">https://blog.mahonex.com/index.php/2018/07/18/ubuntu-18-04-%E5%AE%89%E8%A3%85nvidia-%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/</a></p>
</li>
<li><p>第三步就可以安装 NVIDIA显卡驱动了。<br>参考：<a href="https://blog.csdn.net/wuzhiwuweisun/article/details/82753403" target="_blank" rel="external">https://blog.csdn.net/wuzhiwuweisun/article/details/82753403</a><br>之前我是通过命令行安装的，但是安装后老是提示说有问题，修复许久无果。于是不得已选择了Ubuntu自己带的software安装软件。推荐用这个。好像可以比自己通过命令行装更符合系统的configuration。<br>直接搜索“software updater” -&gt; 点”setting” -&gt; 点”Using NVIDIA driver metapackage from nvidia-driver-390” -&gt; 选择 “Apply Changes”.<br><center><br><img src="/2018/11/29/UbuntuInstallation/software_updater.png" width="80%" height="80%" alt="software_updater"><br>Fig1: Software updater<br></center><br><center><br><img src="/2018/11/29/UbuntuInstallation/setting.png" width="80%" height="80%" alt="setting"><br>Fig2: Setting<br></center><br><strong>NOTE：安装结束请重启！</strong></p>
</li>
<li><p>给CUDA手动降级<br>参考：<a href="https://blog.csdn.net/wuzhiwuweisun/article/details/82753403" target="_blank" rel="external">https://blog.csdn.net/wuzhiwuweisun/article/details/82753403</a><br>由于CUDA 9.0仅支持GCC 6.0及以下版本，而Ubuntu 18.04预装GCC版本为7，手动降级：<br>打开terminal，直接操作以下命令：</p>
<blockquote><p>sudo apt-get install gcc-4.8<br>sudo apt-get install g++-4.8<br>作者：wuzhiwuweisun<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/wuzhiwuweisun/article/details/82753403" target="_blank" rel="external">https://blog.csdn.net/wuzhiwuweisun/article/details/82753403</a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p>
</blockquote>
<p>装完后进入到/usr/bin目录下,执行</p>
<blockquote><p>输入：<br>ls -l gcc*<br>显示（我这里由于已经改过了，所以第一行是链接到4.8了，原来的是链接到7.3）：<br>lrwxrwxrwx 1 root root      7 9月  12 20:43 gcc -&gt; gcc-4.8<br>-rwxr-xr-x 1 root root 772280 3月  19  2018 gcc-4.8<br>lrwxrwxrwx 1 root root     22 4月  15 12:52 gcc-7 -&gt; x86_64-linux-gnu-gcc-7<br>lrwxrwxrwx 1 root root      8 4月   7 02:04 gcc-ar -&gt; gcc-ar-7<br>-rwxr-xr-x 1 root root  27088 3月  19  2018 gcc-ar-4.8<br>lrwxrwxrwx 1 root root     25 4月  15 12:52 gcc-ar-7 -&gt; x86_64-linux-gnu-gcc-ar-7<br>lrwxrwxrwx 1 root root      5 4月   7 02:04 gcc.bak -&gt; gcc-7<br>lrwxrwxrwx 1 root root      8 4月   7 02:04 gcc-nm -&gt; gcc-nm-7<br>-rwxr-xr-x 1 root root  27088 3月  19  2018 gcc-nm-4.8<br>lrwxrwxrwx 1 root root     25 4月  15 12:52 gcc-nm-7 -&gt; x86_64-linux-gnu-gcc-nm-7<br>lrwxrwxrwx 1 root root     12 4月   7 02:04 gcc-ranlib -&gt; gcc-ranlib-7<br>-rwxr-xr-x 1 root root  27088 3月  19  2018 gcc-ranlib-4.8<br>lrwxrwxrwx 1 root root     29 4月  15 12:52 gcc-ranlib-7 -&gt; x86_64-linux-gnu-gcc-ranlib-7<br>作者：wuzhiwuweisun<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/wuzhiwuweisun/article/details/82753403" target="_blank" rel="external">https://blog.csdn.net/wuzhiwuweisun/article/details/82753403</a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p>
</blockquote>
<p>发现gcc链接到gcc-7.3, 需要将它改为链接到gcc-4.8，方法如下:</p>
<blockquote><p>sudo mv gcc gcc.bak #备份<br>sudo ln -s gcc-4.8 gcc #重新链接<br>作者：wuzhiwuweisun<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/wuzhiwuweisun/article/details/82753403" target="_blank" rel="external">https://blog.csdn.net/wuzhiwuweisun/article/details/82753403</a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p>
</blockquote>
<p>对g++做同样的修改：</p>
<blockquote><p>ls -l g++*<br>sudo mv g++ g++.bak<br>sudo ln -s g++-4.8 g++<br>作者：wuzhiwuweisun<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/wuzhiwuweisun/article/details/82753403" target="_blank" rel="external">https://blog.csdn.net/wuzhiwuweisun/article/details/82753403</a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p>
</blockquote>
<p>最后看gcc和g++版本号,如果是4.8代表修改成功：</p>
<blockquote><p>mayunteng@mayunteng-OptiPlex-7040:/usr/bin$ gcc –version<br>gcc (Ubuntu 4.8.5-4ubuntu8) 4.8.5<br>Copyright (C) 2015 Free Software Foundation, Inc.<br>This is free software; see the source for copying conditions.  There is NO<br>warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</p>
<p>mayunteng@mayunteng-OptiPlex-7040:/usr/bin$ g++ –version<br>g++ (Ubuntu 4.8.5-4ubuntu8) 4.8.5<br>Copyright (C) 2015 Free Software Foundation, Inc.<br>This is free software; see the source for copying conditions.  There is NO<br>warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.<br>作者：wuzhiwuweisun<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/wuzhiwuweisun/article/details/82753403" target="_blank" rel="external">https://blog.csdn.net/wuzhiwuweisun/article/details/82753403</a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p>
</blockquote>
</li>
<li><p>安装CUDA 9.0<br>参考：<a href="https://blog.csdn.net/wuzhiwuweisun/article/details/82753403" target="_blank" rel="external">https://blog.csdn.net/wuzhiwuweisun/article/details/82753403</a><br>首先去官网下载CUDA安装包，注意根据你的系统选，最后一项选择runfile(local)。<br>CUDA最新版下载地址：<a href="https://developer.nvidia.com/cuda-downloads" target="_blank" rel="external">https://developer.nvidia.com/cuda-downloads</a><br>以前版本的CUDA：<a href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank" rel="external">https://developer.nvidia.com/cuda-toolkit-archive</a><br>找到CUDA 9.0版本下载，几个小的更新包可以不安装。<br>进入刚刚下载的CUDA包的路径，执行命令：</p>
<blockquote><p>sudo sh cuda_9.0.176_384.81_linux.run</p>
</blockquote>
<p>然后按照下面的执行：</p>
<blockquote><p>Do you accept the previously read EULA? (accept/decline/quit): accept You are attemptingto install on an unsupported configuration. Do you wish to continue? ((y)es/(n)o) [ default is no ]: y<br>Install NVIDIA Accelerated Graphics Driver for Linux-x86_64 352.39? ((y)es/(n)o/(q)uit): n<br>Install the CUDA 8.0 Toolkit? ((y)es/(n)o/(q)uit): y<br>Enter Toolkit Location [ default is /usr/local/cuda-8.0 ]:<br>Do you want to install a symbolic link at /usr/local/cuda? ((y)es/(n)o/(q)uit): y Install the CUDA 8.0 Samples? ((y)es/(n)o/(q)uit): y Enter CUDA Samples Location [ default is /home/kyle ]:</p>
<p>作者：wuzhiwuweisun<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/wuzhiwuweisun/article/details/82753403" target="_blank" rel="external">https://blog.csdn.net/wuzhiwuweisun/article/details/82753403</a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p>
</blockquote>
</li>
<li><p>配置CUDA ENVIRONMENT<br>参考：<a href="https://blog.csdn.net/wuzhiwuweisun/article/details/82753403" target="_blank" rel="external">https://blog.csdn.net/wuzhiwuweisun/article/details/82753403</a><br>打开.bashrc文件，文件的末尾添加下面两行，注意修改成你的安装路径：</p>
<blockquote><p>sudo vim “~/.bashrc”<br>export PATH=”/usr/local/cuda-9.0/bin:$PATH” #这里添加路径出错的话最好加上双引号把路径括起来，这里已经加上了双引号<br>export LD_LIBRARY_PATH=”/usr/local/cuda-9.0/lib64:$LD_LIBRARY_PATH”<br>作者：wuzhiwuweisun<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/wuzhiwuweisun/article/details/82753403" target="_blank" rel="external">https://blog.csdn.net/wuzhiwuweisun/article/details/82753403</a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p>
</blockquote>
<p>测试一下CUDA是否安装成功：</p>
<blockquote><p>输入：<br>nvcc -V<br>显示：<br>nvcc: NVIDIA (R) Cuda compiler driver<br>Copyright (c) 2005-2017 NVIDIA Corporation<br>Built on Fri_Sep__1_21:08:03_CDT_2017<br>Cuda compilation tools, release 9.0, V9.0.176<br>作者：wuzhiwuweisun<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/wuzhiwuweisun/article/details/82753403" target="_blank" rel="external">https://blog.csdn.net/wuzhiwuweisun/article/details/82753403</a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p>
</blockquote>
<p>编译 CUDA Samples：</p>
<blockquote><p>mayunteng@mayunteng-OptiPlex-7040:~$ cd NVIDIA_CUDA-9.0_Samples/0_Simple/vectorAdd<br>mayunteng@mayunteng-OptiPlex-7040:~/NVIDIA_CUDA-9.0_Samples/0_Simple/vectorAdd$ make<br>mayunteng@mayunteng-OptiPlex-7040:~/NVIDIA_CUDA-9.0_Samples/0_Simple/vectorAdd$ ./vectorAdd<br>[Vector addition of 50000 elements]<br>Copy input data from the host memory to the CUDA device<br>CUDA kernel launch with 196 blocks of 256 threads<br>Copy output data from the CUDA device to the host memory<br>Test PASSED<br>Done</p>
<p>作者：wuzhiwuweisun<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/wuzhiwuweisun/article/details/82753403" target="_blank" rel="external">https://blog.csdn.net/wuzhiwuweisun/article/details/82753403</a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p>
</blockquote>
</li>
<li><p>安装CUDNN 7.05<br>参考：<a href="https://blog.csdn.net/wuzhiwuweisun/article/details/82753403" target="_blank" rel="external">https://blog.csdn.net/wuzhiwuweisun/article/details/82753403</a><br>从官网：<a href="https://developer.nvidia.com/cudnn" target="_blank" rel="external">https://developer.nvidia.com/cudnn</a> 找到这个版本，对应自己的系统，下载后解压缩。<br>先进入压缩包解压后的路径，再执行下面的指令</p>
<blockquote><p>cd cuda<br>sudo cp lib64/<em> /usr/local/cuda/lib64/<br>sudo cp include/</em> /usr/local/cuda/include/<br>sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*</p>
<p>作者：wuzhiwuweisun<br>来源：CSDN<br>原文：<a href="https://blog.csdn.net/wuzhiwuweisun/article/details/82753403" target="_blank" rel="external">https://blog.csdn.net/wuzhiwuweisun/article/details/82753403</a><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p>
</blockquote>
<p>到此，CUDNN安装完成！</p>
</li>
<li><p>安装Pytorch<br>这个我就很简单了，直接是按照pytorch官网安装测试的。直接到<a href="https://pytorch.org/" target="_blank" rel="external">https://pytorch.org/</a> 选好你的系统的对应信息，然后用anaconda安装就好了。anaconda的安装也可以参考wuzhiwuweisun文章开头写的。在这里就不累赘重复了。</p>
</li>
</ol>
<p>（Note: 这个过程，我找了很多资料，失败了很多次。这个是最终适合我的流程。依据个人系统不同，可能不具备普适性，主要记下来给大家参考以及自用。）</p>
]]></content>
      
        <categories>
            
            <category> Environment setup </category>
            
        </categories>
        
        
        <tags>
            
            <tag> package installation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hash Tables and Arrays]]></title>
      <url>/2018/08/21/HashtableString/</url>
      <content type="html"><![CDATA[<h1 id="Hash-Tables"><a href="#Hash-Tables" class="headerlink" title="Hash Tables"></a>Hash Tables</h1><h2 id="Advantage-for-dealing-with-individual-data"><a href="#Advantage-for-dealing-with-individual-data" class="headerlink" title="Advantage for dealing with individual data"></a>Advantage for dealing with individual data</h2><ol>
<li>Quick insert</li>
<li>Quick remove</li>
<li>Quick lookup (*)<ul>
<li>Retrive a data in a constant time</li>
</ul>
</li>
<li>Quick Modify</li>
</ol>
<h2 id="Define-Hash-Table"><a href="#Define-Hash-Table" class="headerlink" title="Define Hash Table"></a>Define Hash Table</h2><ul>
<li>A hash table consists of <em>an array</em> to store the data in<ul>
<li>The table may contain complex types or pointers to objects</li>
<li>One attribute of the object is designed as the table’s key</li>
</ul>
</li>
<li>A hash table also need a <em>hash function</em> that maps a key to an array index.<ul>
<li>Collision: the hash function maps two different keys to the same index</li>
</ul>
</li>
</ul>
<h2 id="Hash-Function"><a href="#Hash-Function" class="headerlink" title="Hash Function"></a>Hash Function</h2><ul>
<li>We want the keys to be <em>distributed evenly</em> over the underlying array<ul>
<li>e.g. h(x) = x mod tableSize</li>
<li>try to avoid collision</li>
</ul>
</li>
<li>Hash Function should be fast and easy to calculate</li>
</ul>
<h3 id="Dealing-with-Collision"><a href="#Dealing-with-Collision" class="headerlink" title="Dealing with Collision"></a>Dealing with Collision</h3><h4 id="Open-addressing"><a href="#Open-addressing" class="headerlink" title="Open addressing"></a>Open addressing</h4><p><em>shortage</em>: when a deletion happens, it may break the logic existing in open addressing.</p>
<h5 id="Linear-probing"><a href="#Linear-probing" class="headerlink" title="Linear probing"></a>Linear probing</h5><ul>
<li>if there is collision, we should search an empty space start from current position sequentially until we find an available space.</li>
<li><em>shortage:</em> Linear probing leads to primary clustering</li>
</ul>
<h5 id="Quadratic-probing"><a href="#Quadratic-probing" class="headerlink" title="Quadratic probing"></a>Quadratic probing</h5><ul>
<li>Quadratic probing is a refinement of linear probing that prevents primary clustering.    <ul>
<li>For each successive probe, i, add i<sup>2</sup> to the original location index<ul>
<li>e.g. 1st probe: h(x)+1<sup>2</sup>, 2nd: h(x)+2<sup>2</sup>, 3rd: h(x)+3<sup>2</sup>, etc.</li>
</ul>
</li>
</ul>
</li>
<li><em>shortage:</em> after some time a sequence of probes repeats itself<ul>
<li>Results in secondary clustering. (By analysing, this isn’t a big issue).</li>
</ul>
</li>
</ul>
<h5 id="Double-Hashing"><a href="#Double-Hashing" class="headerlink" title="Double Hashing"></a>Double Hashing</h5><ul>
<li>make another hash key h<sub>2</sub>.</li>
</ul>
<h4 id="Seperate-Chaining"><a href="#Seperate-Chaining" class="headerlink" title="Seperate Chaining"></a>Seperate Chaining</h4><p>the method seperate chaining is to put linked list in the entry of array.</p>
]]></content>
      
        <categories>
            
            <category> CMPT </category>
            
        </categories>
        
        
        <tags>
            
            <tag> interview </tag>
            
            <tag> data structure </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac 环境下 install dryscrape]]></title>
      <url>/2018/07/01/install-dryscrape/</url>
      <content type="html"><![CDATA[<h4 id="本机环境"><a href="#本机环境" class="headerlink" title="本机环境"></a>本机环境</h4><ol>
<li>macOS High Sierra (version 10.13.5)</li>
<li>python 3.6</li>
</ol>
<h4 id="遇到的问题-faced-problem-："><a href="#遇到的问题-faced-problem-：" class="headerlink" title="遇到的问题 (faced problem)："></a>遇到的问题 (faced problem)：</h4><pre><code>如下：
</code></pre><blockquote><p>Project ERROR: Xcode not set up properly. You may need to confirm the license agreement by running /usr/bin/xcodebuild.<br>error: [Errno 2] No such file or directory: ‘src/webkit_server’</p>
</blockquote>
<h4 id="真实的原因-reason"><a href="#真实的原因-reason" class="headerlink" title="真实的原因 (reason):"></a>真实的原因 (reason):</h4><pre><code>webkit-server 没有被安装成功
</code></pre><h4 id="尝试的方法-tried-solution"><a href="#尝试的方法-tried-solution" class="headerlink" title="尝试的方法 (tried solution):"></a>尝试的方法 (tried solution):</h4><pre><code>以为是因为Xcode的协议没有达成，于是拼命去想agree这个协议。
尝试了两次，以及升级了Xcode，依旧没有反应。
</code></pre><blockquote><p>sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer<br>sudo xcodebuild -license</p>
</blockquote>
<h4 id="正确的方法-real-solution"><a href="#正确的方法-real-solution" class="headerlink" title="正确的方法 (real solution):"></a>正确的方法 (real solution):</h4><pre><code>安装qt5.5从而正确安装webkit-server。
</code></pre><blockquote><p>brew install <a href="mailto:qt@5.5" target="_blank" rel="external">qt@5.5</a><br>export PATH=”<a href="mailto:/usr/local/opt/qt@5.5" target="_blank" rel="external">/usr/local/opt/qt@5.5</a>/bin:$PATH”<br>pip install webkit-server</p>
</blockquote>
<p>这个包的安装是为了方便抓取一些有javascript主写的网页。最近研究抓网页，到阶段会总结经验。</p>
]]></content>
      
        <categories>
            
            <category> Environment setup </category>
            
        </categories>
        
        
        <tags>
            
            <tag> package installation </tag>
            
            <tag> NLP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[K-fold 交叉验证]]></title>
      <url>/2018/05/24/k-cross-validation/</url>
      <content type="html"><![CDATA[<p>part1: 阐释 10-fold 交叉验证的方法</p>
<p>part2: bias-variance trade off</p>
<p>part3: 10-fold 的不同应用</p>
]]></content>
      
        <categories>
            
            <category> Statistics </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Statistics </tag>
            
            <tag> ML </tag>
            
            <tag> Evaluation </tag>
            
            <tag> Resampling method </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Boosting method 学习 (1)]]></title>
      <url>/2018/05/22/learning-boosting-1/</url>
      <content type="html"><![CDATA[<h3 id="Introduction-Boosting-提升方法"><a href="#Introduction-Boosting-提升方法" class="headerlink" title="Introduction Boosting (提升方法)"></a>Introduction Boosting (提升方法)</h3><p>Definition: The term <strong>boosting</strong> refers to a family of algorithms that are able to convert weak learners to strong learners。<br>提升方法旨在通过线性组合多个弱分类器，从而构建强分类器以提高分类性能。弱分类器的构建中，每一个训练弱分类器的数据集的训练样本的权重将有所改变。</p>
<h4 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h4><p>训练样本集 $X = \{X_1, X_2, X_3\}$, 其中X中的每一个数据都是i.i.d.且从分布 <em>D</em> 中抽取得到。假设我们现在只有一个弱分类器 $h_1$, 且$h_1$只能分对数据 $X_1$ 和$X_2$, 完全分不对 $X_3$ ,则该分类器的正确率只有 1/3。<br>那么此时我们可以尝试得到一个新的分布<em>D’</em>，在此分布中，$X_3$类数据的比重有所增大。则可以从此分布抽样得到的训练集中训练出 $h_2$。$h_2$也是一个弱分类器，只对于$X_1$和$X_3$类数据可以分对，而对于$X_2$，将会完全分错。那么依次可知，$h_2$ 和$h_1$对于分类数据类型$X_1$是完全没有问题的，所以$h_1$和$h_2$分类器的组合将会对分类$X_2$ 和$X_3$存在部分误差。则创建一个新的数据集<em>D’’</em>。在这个数据集中增加$X_2$ 和$X_3$的权重。采样训练出新的分类器$h_3$。$h_3$只对于分类$X_1$有问题。那么如果我们对于$h_1$，$h_2$ 和$h_3$ 以某种方式组合起来，我们就会得到一个perfect classifier。</p>
]]></content>
      
        <categories>
            
            <category> STAT </category>
            
        </categories>
        
        
        <tags>
            
            <tag> statistics </tag>
            
            <tag> AI </tag>
            
            <tag> training </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OOD learning（1）]]></title>
      <url>/2018/05/14/OOD-learning-1/</url>
      <content type="html"><![CDATA[<h2 id="CHAPTER-1-A-Crash-Course-in-Java-Incomplete"><a href="#CHAPTER-1-A-Crash-Course-in-Java-Incomplete" class="headerlink" title="CHAPTER 1 A Crash Course in Java (Incomplete)"></a>CHAPTER 1 A Crash Course in Java (Incomplete)</h2><ol>
<li><p>a class definition contains:</p>
<ul>
<li>constructors</li>
<li>methods </li>
<li>fields</li>
</ul>
</li>
<li><p>Object-oriented programming follows the <strong>“client-server” model</strong>. The client code requests a <strong>service by invoking a method</strong> on an object.</p>
</li>
<li><p>In Java, an object value is always a reference to an object, or, i n other words, a value that describes the location of the object.</p>
<ul>
<li>do a deep copy by implementing/using clone method</li>
</ul>
</li>
<li><p>The special reference nul l refers to no object. You can set an object variable to null:     - worldGreeter = null;</p>
<ul>
<li>If you invoke a method on a null reference,a NullPointerException is thrown. </li>
</ul>
</li>
<li><p>However, in Java, a method can never update the contents ofa variable that is passed as a parameter.</p>
</li>
</ol>
<h2 id="CHAPTER-2-The-Object-Oriented-Design-Process"><a href="#CHAPTER-2-The-Object-Oriented-Design-Process" class="headerlink" title="CHAPTER 2 The Object-Oriented Design Process"></a>CHAPTER 2 The Object-Oriented Design Process</h2><h3 id="From-Problem-to-Code"><a href="#From-Problem-to-Code" class="headerlink" title="From Problem to Code"></a>From Problem to Code</h3><h4 id="The-analysis-phase"><a href="#The-analysis-phase" class="headerlink" title="The analysis phase"></a>The analysis phase</h4><ol>
<li>The goal of the analysis phase is a complete description of what the software product should do. (called functional specification)<ul>
<li>user manual</li>
<li>a set of user cases</li>
<li>focus on <strong>what</strong> it should be done</li>
</ul>
</li>
</ol>
<h4 id="The-Design-Phase"><a href="#The-Design-Phase" class="headerlink" title="The Design Phase"></a>The Design Phase</h4><ol>
<li>Each class must be specified precisely, listing both its responsi­ bilities and its relationship to other classes in the system.</li>
<li>major goals:<ul>
<li>Identify the classes</li>
<li>Identify the <strong>responsibilities</strong> of these classes</li>
<li>Identify the <strong>relationships</strong> among these classes</li>
</ul>
</li>
<li>the end result consist of the following artifacts:<ul>
<li>A textual description of the classes and their most important responsibilities</li>
<li>Diagrams of the relationships among the classes</li>
<li>Diagrams of important usage scenarios</li>
<li>State diagrams ofobjects whose behavior is highly state-dependent</li>
</ul>
</li>
</ol>
<h4 id="Implementation-phase"><a href="#Implementation-phase" class="headerlink" title="Implementation phase"></a>Implementation phase</h4><p>Implement the prototype and refine your design as needed</p>
<h3 id="The-object-and-class-Concept"><a href="#The-object-and-class-Concept" class="headerlink" title="The object and class Concept"></a>The object and class Concept</h3><ol>
<li>Objects are entities in a computer program that have three character­ istic properties:<ul>
<li>State (like the property variables in there)</li>
<li>Behavior (like methods)</li>
<li>Identity</li>
</ul>
</li>
</ol>
<h3 id="Identifying-classes"><a href="#Identifying-classes" class="headerlink" title="Identifying classes"></a>Identifying classes</h3><ol>
<li>A simple rule of thumb for identifYing classes is to look for nouns in the functional specification, such as “Mailbox”, “Menu” etc.</li>
</ol>
<h3 id="Identifying-Responsibilities"><a href="#Identifying-Responsibilities" class="headerlink" title="Identifying Responsibilities"></a>Identifying Responsibilities</h3><ol>
<li>Just as classes correspond to nouns in the problem description, respon­ sibilities correspond to verbs</li>
</ol>
<h3 id="Relationships-Between-Classes"><a href="#Relationships-Between-Classes" class="headerlink" title="Relationships Between Classes"></a>Relationships Between Classes</h3><ol>
<li>Three relationships are common among classes:<ul>
<li>Dependency (“uses”)</li>
<li>Aggregation (“has”)</li>
<li>Inheritance (“is”)</li>
</ul>
</li>
</ol>
<h4 id="Dependency-“uses”"><a href="#Dependency-“uses”" class="headerlink" title="Dependency (“uses”)"></a>Dependency (“uses”)</h4><p>One important design goal is to minimize the number of dependency relationships; that is, to minimize the coupling between classes. (If one class is unaware of the existence of another, it is also unconcerned about any changes in that other class. <strong>A low degree of coupling tends to make it much easier to implement changes in the future.</strong>)</p>
<h4 id="Aggregation-“has”"><a href="#Aggregation-“has”" class="headerlink" title="Aggregation (“has”)"></a>Aggregation (“has”)</h4><ol>
<li>Aggregation takes place if objects of one class contain objects of another class over a period of time. </li>
<li>Aggregation is a special case of dependency. Of course, if a class contains objects of another class, then it is acutely aware of the existence of that class.</li>
<li>Aggregation is often informally described as the “has-a” relationship. A message queue has a message.</li>
</ol>
<h4 id="Inheritance-“is”"><a href="#Inheritance-“is”" class="headerlink" title="Inheritance (“is”)"></a>Inheritance (“is”)</h4><ol>
<li>A class inherits from another if all objects of its class are special cases of objects of the other class, capable of exhibiting the same behavior but possibly with additional responsibilities and a richer state.</li>
</ol>
<h3 id="User-case"><a href="#User-case" class="headerlink" title="User case"></a>User case</h3><ul>
<li>Use cases are an analysis technique to describe in a formal way how a computer system should work. Each use case focuses on a specific scenario, and describes the steps that are necessary to bring it to successful completion.</li>
<li>A use case lists a sequence of actions that yields a result that is of value to an actor.</li>
<li>A use case should include variations that describe these situations.</li>
</ul>
<h3 id="CRC-card-skipped-for-now"><a href="#CRC-card-skipped-for-now" class="headerlink" title="CRC card (skipped for now)"></a>CRC card (skipped for now)</h3><ul>
<li>The CRC card method is an effective design technique for discovering classes, responsibilities, and relationships. A CRC card is simply an index card that describes one class and lists its responsibilities and collaborators (dependent classes). </li>
<li>You make one card for each discovered class. Write the class name at the top ofthe card. Below, on the <strong>left-hand side, you describe the responsibilities</strong>. On the right-hand side, you <strong>list other classes that need to collaborate</strong> with this class so that it can fulfill its responsibilities.<ul>
<li>The responsibilities should be at a high level. Don’t write individual methods.</li>
</ul>
</li>
</ul>
<h3 id="UML-Class-Diagrams"><a href="#UML-Class-Diagrams" class="headerlink" title="UML Class Diagrams"></a>UML Class Diagrams</h3><ul>
<li>The basic UML notation for class diagrams is fairly simple.<ul>
<li>Classes are drawn as boxes<ul>
<li>contains class name, attributes and methods<ul>
<li>You usually do not list all attributes and methods, only the most important ones.</li>
<li>Often, the types of attributes, parameters, and return values are omitted to conserve space. </li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>UML connectors<center><br><img src="/2018/05/14/OOD-learning-1/UML_Connector.png" width="70%" height="70%" alt="UML connector"><br></center>

</li>
</ul>
<h3 id="Sequence-Diagram"><a href="#Sequence-Diagram" class="headerlink" title="Sequence Diagram"></a>Sequence Diagram</h3><p>In contrast, a sequence diagram shows the dynamics of a particular scenario.</p>
<ul>
<li>In UML, you use underline to distinguish object rectangles from class rectangles. The text inside an object rectangle has one of the following three formats:<ul>
<li>obj ectName : (1 assName (full description)</li>
<li>obj ectName (class not specified)</li>
<li>: (1 assName (object not specified)</li>
</ul>
</li>
<li>The dashed vertical line that emanates from the object is called the lifeline. </li>
<li>The rectangles along the lifeline are called activation bars. </li>
</ul>
<h3 id="State-Diagrams"><a href="#State-Diagrams" class="headerlink" title="State Diagrams"></a>State Diagrams</h3><p>Some objects have a discrete set of states that affect their behavior. </p>
<p><strong>REFERENCE: Object-oriented design &amp; patterns / Cay Horstmann. (Cay S. Horstmann 1959- Hoboken, NJ : Wiley 2006)</strong></p>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
            <category> CMPT </category>
            
        </categories>
        
        
        <tags>
            
            <tag> coding </tag>
            
            <tag> Objected Oriented Design &amp; pattern </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在windows环境下安装pytorch]]></title>
      <url>/2018/05/11/install-pytorch-win/</url>
      <content type="html"><![CDATA[<p>对于Windows的吐槽直接就忽略吧，切入主题。</p>
<h4 id="本机环境"><a href="#本机环境" class="headerlink" title="本机环境"></a>本机环境</h4><ol>
<li>64-bit</li>
<li>windows7</li>
<li>no CPU</li>
</ol>
<h4 id="最好的安装方法"><a href="#最好的安装方法" class="headerlink" title="最好的安装方法"></a>最好的安装方法</h4><ol>
<li><p>install ANACONDA (附上<a href="https://www.anaconda.com/download/#windows" title="windows anaconda install" target="_blank" rel="external">ANACONDA windows Install link</a>)</p>
<ul>
<li>由于pytorch 在Windows不支持Python 2.7版本，<strong>请毫不犹豫下载Anaconda 5.1 的Python 3.6 version。</strong></li>
<li>安装的时候除了全部都是default，最后一个界面是问你要不要了解一下ANACONDA，看心情选择了解与否。</li>
<li>安装需要admin 权限（告知没有权限的亲）。</li>
</ul>
</li>
<li><p>安装好后将\path\to\installed_location\Continuum\anaconda3，<br>以及path\to\installed\location\Continuum\anaconda3\Scripts加入到PATH，以便未来方便使用</p>
<ul>
<li>PATH位于：“Computer &gt; System properties &gt; Advanced system setting”</li>
<li>本步骤需要admin权限</li>
<li>开一个Command Prompt, run “conda -V”。如有version信息返回，则为正确。</li>
</ul>
</li>
<li><p>去到<a href="https://pytorch.org/" target="_blank" rel="external">pytorch</a>界面，选择好和你自己环境相关的选项信息，然后run相应的command。</p>
<ul>
<li>无需纠结pip还是pip3。在anaconda3环境管理下，pip和pip3是一个东西。当然不能全信，可以run “pip -V”验证，如果version显示为anaconda3环境管理下的python3环境即为正确。</li>
<li>有时候会被告知安装的pip版本过旧，请根据自动提示信息更新。</li>
<li>有可能dependence缺少，请依据环境信息更新。</li>
</ul>
</li>
<li><p>安装好后，在command prompt 内 run “py -3”以运行python3。接着run “import torch”。<br>如无问题即完成安装。</p>
<ul>
<li>如果找不到Torch module，请尝试以下步骤:<blockquote><ol>
<li>conda update conda</li>
<li>conda install mkl=2018</li>
</ol>
</blockquote>
</li>
</ul>
</li>
</ol>
<h4 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h4><p>之前希望直接安装python3.5 然后再安装pytorch。成功安装pytorch后，运行时候被告知：<br><blockquote><p>from torch._C import *<br>ImportError: DLL load failed: The specified module could not be found</p>
</blockquote><br>查了类似错误发现是需要补救一些library给Windows。按照网上前辈的方法找好放好后还是不行。不知道是python3.5的坑还是我这台电脑大环境的坑，也未尝试升级python3.6后会不会有改变。但是<strong>还是conda安装简便靠谱，因为conda环境里面已经埋平了一些坑</strong>。</p>
]]></content>
      
        <categories>
            
            <category> Environment setup </category>
            
        </categories>
        
        
        <tags>
            
            <tag> package installation </tag>
            
            <tag> AI programming </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[New York! 纽约！]]></title>
      <url>/2018/05/04/newyork-trip/</url>
      <content type="html"><![CDATA[<p>选择要去纽约旅行，纯粹是两个重度拖延症患者（我以及闺蜜JD小姐）的闲聊结果。估计原因在于我怨念了一下去年由于种种原因最后也没有成行的Banff之旅。记不清楚为何最后决定是去纽约，但是我们俩就你追我赶的定了机票，定了酒店，还很积极的开始做了攻略。<br>然而越做攻略越后悔，因为，查到最后就感觉没什么好逛的。那些响彻各大新闻的名字，比如时代广场，比如华尔街，比如中央公园，看攻略觉得那些貌似就是一个广场、一个街区、一个公园。再加之恐怖分子的硝烟不断，川普老爷的政策新闻不断，临走前，我在走与不走的边缘不断徘徊，几度怕死想退票，一直到免费退订期限过去才正式请假。哦，对了，我们的攻略也不了了之了。好在我和DD同学都很随意，都有着一颗宅在hotel也无怨无悔的心。当我的假期正式开始，我拖着行李箱去了温哥华的公共车站，准备坐大巴去西雅图。啰嗦了那么多，干货来了。</p>
<h1 id="大致预订项目"><a href="#大致预订项目" class="headerlink" title="大致预订项目"></a>大致预订项目</h1><p><strong>PS: 我们的旅行时间是四月底五月初，机票和酒店的价格会随着旅行时间不同有大变化（淡季和旺季，你懂的）。</strong></p>
<h2 id="机票-大巴"><a href="#机票-大巴" class="headerlink" title="机票 + 大巴"></a>机票 + 大巴</h2><p>我的出发地点是温哥华，我村距离美国著名的西雅图坐大巴车即可到达。当时在查票价的时候，温哥华飞纽约比西雅图飞纽约要足足贵了一倍（我不明白原因）。大致<em>单程</em>的票价类似是<strong>温哥华飞纽约要 C$400-500，可是西雅图飞纽约<em>单程</em>大致C$200左右</strong>。又由于DD同学住在西雅图，于是可以愉快的在西雅图呆一晚上第二天中转。我们就果断的选择了从西雅图出发。另外，温哥华去西雅图的大巴有灰狗巴士或者bolt bus，比较而言，<strong>bolt bus 路上时间更短（不去202 奥莱的原因），价格也更便宜（比灰狗便宜几刀）</strong>于是买了bolt bus（另外还有quick bus，就没有了解过。因为在温哥华这边的始发站地点我没搞明白在哪里）。<br>在这里，机票的具体价格和大巴的具体价格我就不说了，这些价格会时不时变化，价格不足参考。</p>
<h2 id="酒店"><a href="#酒店" class="headerlink" title="酒店"></a>酒店</h2><p>出发前查阅了许多酒店，最后由于当时比较好的deal在万豪位于第五大道附近的springhill酒店，就预订了那家。但是这家酒店不是很推荐大家选择，单纯因为四星的价格只给了我三星的酒店设置（虽然我的窗户打开窗帘就可以直接看到帝国大厦，但是，我又不是来看窗外的..）。酒店住的话，推荐大家在曼哈顿中城区（manhattan midtown）附近选择，安全又方便。</p>
<h2 id="Explorer-pass"><a href="#Explorer-pass" class="headerlink" title="Explorer pass"></a>Explorer pass</h2><p>纽约各种各样的pass很多，比大多数旅行城市只发给的city pass要丰富。有那种几天随便走但是几百刀的，也有给出一些固定景点在一个本票里让你随便选。还有就是我们选择的这种，列出了一堆景点，你有权利去兑换其中几个地方。具体几个地方，你就可以选了。当然，票价和你选择的景点数目成正比。这种票在expedia和它自己的官网都有出售。具体买哪种，真的要靠你自己的旅行时间长短和计划决定。<strong>提前网上预订有优惠</strong>，就这一个理由，你就应该在你知道你去几天的时候订起来。保守估计自己可以<strong>一天去俩景点观光/一个博物馆</strong>。依据这个估计去订票就跑不了。</p>
<center><br><img src="/2018/05/04/newyork-trip/seattle.jpg" width="60%" height="60%" alt="seattle"><br>Fig1: 飞跃温村旁的西雅屯<br></center>

<h1 id="6天纽约行"><a href="#6天纽约行" class="headerlink" title="6天纽约行"></a>6天纽约行</h1><p>刨去飞机和大巴时间，我们在纽约呆了六天。如果分区来看纽约，我们就是在曼哈顿呆了六天。因为深浅难测，别的区域我就真的没有考虑过要去了。</p>
<h2 id="Day-1-通过Hop-on-Hop-off-Bus了解纽约"><a href="#Day-1-通过Hop-on-Hop-off-Bus了解纽约" class="headerlink" title="Day 1: 通过Hop-on Hop-off Bus了解纽约"></a>Day 1: 通过Hop-on Hop-off Bus了解纽约</h2><p>由于攻略并没有做齐全，我们决定先坐 hop-on hop-off bus 来了解一下纽约。纽约有很多种hop-on hop-off bus。我们选搭的是Explorer pass上的那个，<strong>叫做Big Bus（帝国大厦入口处附近有上车站点）</strong>。其实票上面写这些bus的停靠站点也不是很清楚。我们只是大致知道帝国大厦旁边有一个。在我们找到自己bus站点前，我们路上遇到了许多卖票的大叔，他们只会告诉你这个不是我们公司的，具体要我们自己找。<strong>作为土温来的人，我认为美国黑人大叔的口音我听不是很懂</strong>，这就直接导致了我们找到了正确的出票大叔还是没闹明白。。他大致以一种奇怪的单词告诉我他要出票给我们了，可是我们没有get到。这可能是城乡差距导致的（城乡差距还体现在很多方便，随后再聊聊）。</p>
<h3 id="纽约的Hop-on-Hop-off-bus"><a href="#纽约的Hop-on-Hop-off-bus" class="headerlink" title="纽约的Hop-on Hop-off bus"></a>纽约的Hop-on Hop-off bus</h3><p>这种双层旅游观光bus在北美很多地方都有。在纽约Explorer pass上的观光大巴可以让你一天内任意乘坐两条线路，一个是<strong>红色线路包括部分midtown 和downtown主要景点</strong>，一个是<strong>蓝色线路包括部分midtown和uptown的主要景点</strong>。<strong>这两条线路好像通常是早上9点开始运营，晚上5点最后一班车发出</strong>。夜间也有特别线路可以带你游览纽约的夜景，但是不包括在我们的票里，于是就没有了解了。<br>这种大巴的特色就是在很多景点设有站点，你可以到感兴趣的站点下车，拍照，自由到周围游荡，然后再上下一班车（目测是15min一班）。坐在车上，如果你懂英文，会有你听得懂听不懂的口音给你介绍景点和当地奇闻（会免费发放耳机和雨衣）。还有一个好处就是它游览的路线两旁就有很多著名景点，如果没时间逛，顺手拍个照也是极好的。<strong>如果特别短期的旅程，比如1-3天，如无特殊安排和要求，找个晴好天气，坐在大巴上层游览一番，就能感觉不虚此行。</strong>因为，我们坐完大巴后，就觉得。。纽约之行可以画上圆满句号了。。是的，如果不是酒店机票订好，我是要回去了。</p>
<center><br><img src="https://theexplorepass.com/wp-content/uploads/2016/10/Big-Bus_New_York_Map_May_15_960x-72.jpg" width="60%" height="60%" alt="big bus"><br>Fig2: Big Bus 缩略地图, 详情请官网了解<br></center>

<center><br><img src="/2018/05/04/newyork-trip/wallstreet-bull.JPG" width="60%" height="60%" alt="big bus"><br>Fig3: big-bus路过华尔街的牛<br></center>

<h3 id="第一天的小感悟"><a href="#第一天的小感悟" class="headerlink" title="第一天的小感悟"></a>第一天的小感悟</h3><p><strong>（如果只是纯想捞攻略干货，请忽略这一part）</strong></p>
<ol>
<li>在纽约大街上认游客有很多特征：相机、衣着、步速、是否保持45度仰视状、有没有一脸懵逼以及敢不敢过马路（这一点估计对天朝人民可以忽略）。纽约人的步伐是特别快的，整个城市活力四射、忙忙碌碌。我在纽城平均每天两万步。当然，选择步行一个原因是交通拥堵（翻译：我穷搭不起taxi，bus也要省着坐），另一个原因是我旅行偏爱走在外面，可以感受风土人情（翻译：同上）。村里来的我，从来没有见过目之所及看不到房顶的房子，纽约到处都是这样的高楼大厦，我时刻都是保持抬头仰望的样子，还嘴里时不时发出“哇”的惊叹（我土我骄傲了吗！）。</li>
<li>第一天，感觉我不喜欢纽约。觉得大家比温村人冷漠，连要饭的骨子里都有一种骄傲。温村里商场门口的要饭的会开开门，纽约要饭的就以孤傲的态度靠着墙酷酷的站着，伸出一只手，用眼角余光看着你。前者，我会可以走另一扇门，不然会有不好意思的感觉；后者，我会走另一扇门，不然我怕不给钱会被打。我还不喜欢纽约的一点，是城市真的脏乱差，和我们村里他们屯里都没法比，地面都脏的不忍直视（我的小白鞋，村里穿了一年还是白白净净的，纽约七天回来就觉得要扔掉了）。这个城市收垃圾的姿态也很有意思。入夜后，大家把垃圾都堆到街边，等待凌晨左右垃圾车来收走。但问题是，有的时候扔晚了，没赶上点儿，垃圾就这样放在了外面。</li>
<li>这个城市贫富差距巨大。在第五大道1000万美刀的两居室楼房的下面，入夜后就是流浪汉旁边睡着流浪汉。寸土寸金的纽约曼哈顿中心，时时刻刻都在施工，盖高楼。每一栋楼，无论是什么时候建成的，隔一段可能就要被拔高。楼的外观，无论新楼旧楼，都是方方正正，没有什么现代艺术的美感（好像曼哈顿外围有一片新盖的楼看起来好一点）。但是那种方方正正、挺挺拔拔的楼，彰显的就是一个又一个财团的霸气和骄傲。去他的美感，我可是美帝的金主爸爸们！听说大纽约地区，工资中位数是5-6w美刀。在房租至少2000一个月，日均开销也不低的纽约，我感觉年轻人压力巨大。这里车水马龙，楼房鳞次栉比，夜晚灯火通明，多少纸醉金迷。你在的城市的特征，是不是就是你千万里追寻的那个你呢？</li>
</ol>
<h2 id="Day-2-amp-5-the-MET（大都会博物馆）"><a href="#Day-2-amp-5-the-MET（大都会博物馆）" class="headerlink" title="Day 2 &amp; 5: the MET（大都会博物馆）"></a>Day 2 &amp; 5: the MET（大都会博物馆）</h2><p>你如果在纽约只呆一天，又是个懂历史的人，那么哪里都别去，直奔大都会，从开馆待到闭馆就对了。大都会博物馆（MET）的举世闻名，我无需赘言，在里面待上七天七夜也是看不完的。全世界的博物馆无论按什么排名，MET无论怎么排都是前三。其实听说MET在纽约一共有三个馆，这个最大的在中央公园旁边，另外还有Met Breuer以及The Cloisters museum and gardens。前者较新，收藏内容较现代。后者比较著名，是把欧洲的一整个修道院搬过来。修道院博物馆我们踩点过的，后面会一一道来。<br>大都会博物馆依据文物所在的地理位置分出了好几大展区。逛博物馆真的需要很大的历史知识储备，<strong>建议大家在入馆参观前对自己感兴趣的内容做一些背景了解</strong>。注意，很多攻略说MET是捐款性质的，<strong>那是大家误解了</strong>。MET只对于生活在周遭（约200公里）的民众是采取自愿捐款性质的售票，对于我们这些远道而来的游客，<strong>MET的票价是25美刀</strong>，童叟无欺哦。</p>
<center><br><img src="/2018/05/04/newyork-trip/ysjb.JPG" width="60%" height="60%" alt="药师经变"><br>Fig4: 药师经变（亚洲展区）<br></center>

<p>MET一天是绝对刷不完的，你就是什么也不看的走也是不可能把每一间房子走完的。<strong>所以建议大家在入口处拿好一个自己母语的地图</strong>，然后直接朝你感兴趣的展区走。精刷的话，一天刷2-3个展区不是梦，但是粗刷的话可能4-6个（具体几个是你的身体行走能力限制的）。如果你实在是没有什么文艺细胞，我依旧建议你泡MET提升一下。没有做好充足的准备，我建议你运用陈丹青先生的办法：你就放空的走过去，一幅一幅的看，你觉得好看的，你就停下来，仔细了解一下（不过相信我，你很快就会停下来，因为你一定会遇到你曾经的美术课本中的某一页，那一刻感受一下书本照进现实）。另外，<strong>MET的语音讲解器是收费的，大约7美刀一个</strong>。</p>
<p>关于MET的攻略部分就这么多了。不是没什么好讲的，而是真的只能自己体验。强烈推荐，绝对不坑。</p>
<h3 id="小感悟"><a href="#小感悟" class="headerlink" title="小感悟"></a>小感悟</h3><p><strong>（如果只是纯想捞攻略干货，请忽略这一part）</strong></p>
<ol>
<li>MET是我有生之年最让我别开生面的地方。我从没见过这么爱收、能收的博物馆。你去逛了就知道：教堂的生铁门、屋顶、窗户以及雕梁画栋，埃及的小狮身人面像和河边的神庙，欧洲的某一座古堡里的每一个房间和中国的巨型壁画，美国的庭院等等，它都能原封不动的搬入，然后以极好的工艺复现在博物馆中，简直让人瞠目结舌。</li>
<li>有一些中国的游客来到MET后不是很相信墙上挂的真的就是真迹，觉得真迹不会只用一条线把它和游客隔开。其实真真假假我们估计都看不出来的，但是北美这边看过的博物馆都是这样展览的。我只想说，我认为画应该都是真的。</li>
<li>如果有时间，真的是应该多做一些功课在去逛博物馆，或者多花一些时间在这上面。不然，逛起来真的是有囫囵吞枣的感觉，还是挺难受的。</li>
</ol>
<h2 id="Day-3-911-纪念馆-世贸中心-wall-street-三一教堂-自由女神像-Oculus"><a href="#Day-3-911-纪念馆-世贸中心-wall-street-三一教堂-自由女神像-Oculus" class="headerlink" title="Day 3: 911 纪念馆 + 世贸中心 + wall street + 三一教堂 + 自由女神像 + Oculus"></a>Day 3: 911 纪念馆 + 世贸中心 + wall street + 三一教堂 + 自由女神像 + Oculus</h2><h3 id="自由女神像"><a href="#自由女神像" class="headerlink" title="自由女神像"></a>自由女神像</h3><p>不要怀疑为什么一天能去那么多地方，因为他们离得都很近。我们住的地方在曼哈顿中城区，而我说的这些地方都在曼哈顿下城区。那天早上，我们坐地铁先来到了自由女神像附近的公园。去看自由女神像的交通方式有很多。</p>
<ol>
<li>可以乘坐渡轮到自由女神像的那座小岛上去，然后近距离观看。（可是那个小岛除了这个雕塑什么都没有，直接pass）</li>
<li>可以乘坐yellow sea bus。就是纽约黄色计程车那种黄色的海上bus.(排队的人超多，bus容量也很有限)</li>
<li>可以乘坐一个观光渡轮。好像沿河游览一圈的样子。(again,排队的人超多。)</li>
<li><strong>坐一个观光帆船。人少，可提前预定上船时间（我们就是这种）。</strong><br>以上四种方法，Explorer pass里面都有，帆船那个好像叫什么sailing，我不太记得了，总之一看你就明白。<center><br><img src="/2018/05/04/newyork-trip/zyns.JPG" width="60%" height="60%" alt="自由女神"><br>Fig5: 雾里的自由女神<br></center><br><center><br><img src="/2018/05/04/newyork-trip/blkl.JPG" width="60%" height="60%" alt="布鲁克林桥两头"><br>Fig6: 布鲁克林桥两头，左边的曼哈顿，右边的新泽西<br></center>

</li>
</ol>
<h3 id="wall-street-三一教堂"><a href="#wall-street-三一教堂" class="headerlink" title="wall street + 三一教堂"></a>wall street + 三一教堂</h3><p>从观光帆船上下来，我们就信步走到了wall street。那天是周日，自然没有人上班，都是游客。也看不到wall street平时的景象，再加上周围各种装修，照也没有好好拍。总之呢，就是一个street，没有什么特别的。</p>
<center><br><img src="/2018/05/04/newyork-trip/nyes.JPG" width="60%" height="60%" alt="纽约证券交易所"><br>Fig7: 纽约证券交易所<br></center><br>从纽交所穿过一个小巷子一直上去就是圣三一教堂了。是一个非常古旧的很有历史的教堂。教堂周围，是许多墓地。自然都是些大家族的墓地。其中最著名的，可能是美金10刀纸币后面印着的人就葬在这里。三一教堂值得进去欣赏一番。感受一下古老教堂的庄重，以及大家的虔诚，还能了解一下宗教文化。要注意保持安静哦。<br><center><br><img src="/2018/05/04/newyork-trip/syjt.JPG" width="50%" height="50%" alt="三一教堂"><br>Fig8: 三一教堂<br></center>

<h3 id="911-纪念馆和世贸中心"><a href="#911-纪念馆和世贸中心" class="headerlink" title="911 纪念馆和世贸中心"></a>911 纪念馆和世贸中心</h3><p>我们这一代人，若说真正经历过什么历史性的全球轰动的大事件，911当属我们脑子里的第一个反应。我们从三一教堂步行10分钟左右就走到了911纪念馆。<strong>如果你有时间，建议你去参观一下纪念馆里面</strong>。纪念馆是收门票的。但是，我们是用Explorer pass 进入的，所以票价我不记得是多少了。911纪念馆里面很多次掀起了我的泪点。大家慌乱的逃窜，路过的人的惊恐，许多痛失所爱的场景，以及数不胜数的寻人启事。如果有时间，在这座建于当年世贸双子星地下两层的地方，感受一下生命的可贵，感受一下恐怖主义的残暴，可能会更加热爱生活吧。</p>
<center><br><img src="/2018/05/04/newyork-trip/911.JPG" width="60%" height="60%" alt="911"><br>Fig8: 911纪念馆大厅的墙壁。墙后埋葬了3000多个未救出且未能挖出尸体的受难者。<br></center><br>倒映虚空是纪念馆旁边的纪念建筑，两个大水池，水生生不息的入池塘内，像是流入地下，又在干净的水的倒影下，像是流入了天际。在水池的周围的女儿墙上刻着的是一个有一个遇难者的名字。他们每一个人的故事和梦想都在911那天戛然而止，每一个人的灵魂，都随着流入天际的池水，永安天堂。<br><center><br><img src="/2018/05/04/newyork-trip/dyxk.JPG" width="60%" height="60%" alt="倒映虚空"><br>Fig9: 倒映虚空<br></center><br>新的世贸中心一号楼”One World Trade Center“是目前全纽约最高的建筑物，同时也是世界第六高楼。就坐落在在倒映虚空的旁边，你一抬头就看见。在我和小伙伴看来，也就是一座高楼，我们就没有进去了。<br><center><br><img src="/2018/05/04/newyork-trip/1WTC.JPG" width="60%" height="60%" alt="世贸中心一号楼"><br>Fig10: 世贸中心一号楼<br></center>

<h3 id="Oculus"><a href="#Oculus" class="headerlink" title="Oculus"></a>Oculus</h3><p>纽约的地铁站有着一百多年的历史，脏乱差是和新城市的地铁形成鲜明的对比的。古老的地铁站里面没有电梯，通风做得也不是很好，有一股排泄物的味道。虽然我没有遇到，但是地铁站里面到处贴着的”小心老鼠“的警示牌，非常说明了卫生情况。是的，地铁站里面会有小老鼠穿行，大家要小心哦。<strong>坐地铁的时候，千万记得不要选择坐在最后一节车厢</strong>。我们遇到得最瞠目结舌的事情就是，最后一节车厢，有个流浪汉坐在座位上，边睡觉，边大便。所以，不要乘坐最后一节车厢！！！<br>但是，新建的地铁站就不同了。新建的地铁站到处体现了现代艺术和城市的先进的气息。Oculus地铁站就是其中的典型代表。作为新晋网红的Oculus 地铁站，简直就是拍照圣地。外形像是一只展翅高飞的健硕的鸟，内部也是美得不行。我们在这里自拍后坐地铁返回了midtown。</p>
<center><br><img src="/2018/05/04/newyork-trip/oclus.JPG" width="60%" height="60%" alt="Oculus"><br>Fig10: Oculus (白色的那栋)<br></center>


<h2 id="Day-4-第五大道-麦迪逊大道-MoMA"><a href="#Day-4-第五大道-麦迪逊大道-MoMA" class="headerlink" title="Day 4: 第五大道 + 麦迪逊大道 + MoMA"></a>Day 4: 第五大道 + 麦迪逊大道 + MoMA</h2><h3 id="MoMA"><a href="#MoMA" class="headerlink" title="MoMA"></a>MoMA</h3><p>如果你对于现代艺术一无所知，且时间和金钱都有限，那么我不推荐逛MoMA。如果你经济可以承受，时间也有一些，那么逛逛MoMA也未尝不可。MoMA是现代艺术博物馆的简称。里面有很多现代艺术的佳作，比如梵高的星空，莫奈的睡莲（是的，哪里都有睡莲，这家伙画了200多幅），以及达利的记忆的永恒（我参观的当天被LV总部借去展览了）。但是，<strong>这一切都放在了博物馆的五楼，如果你时间精力有限，直奔五楼，相信我，你不会后悔。五楼是你票价的全部价值。</strong></p>
<center><br><img src="/2018/05/04/newyork-trip/stars.JPG" width="60%" height="60%" alt="stars"><br>Fig11: 星空（梵高）<br></center>

<p>那么一到四楼有什么呢，我觉得是看当天展览了什么内容。并不是所有的画作都是MoMA拥有的，有很多画作是一些人借给MoMA展览的。我去的时候，三楼有一些摄影作品展览，其中有一面墙的各种各样不同人的分娩的照片，有各种分娩的形势。还有你可以在你家摄影集里面翻到的那种80s or 90s妈妈辈的照片。其他楼层有一些现代的雕塑和设计以及画作，本人表示大部分看不懂。我还差点破坏了艺术作品。刚刚进去的时候，门口有个奶白色的大理石，我差点就自觉的踩上去了（由于身高有限，所以总想增高）。后来才发现是个作品，且名字也很直白：the white rock。总之，对于现代艺术，我不是很有欣赏力。还是大家自行体会比较好。</p>
<h3 id="第五大道-麦迪逊大道"><a href="#第五大道-麦迪逊大道" class="headerlink" title="第五大道 + 麦迪逊大道"></a>第五大道 + 麦迪逊大道</h3><p>第五大道和麦迪逊大道，是我小学的英文课本中常听到的地理位置。记得课本上俩人聊天，在第五大道上问路，好像不用怎么拐就可以到达麦迪逊大道了。事实上的确挺近的。这两条大道上也没有什么特别稀奇的东西，就是各种商场里开的店开到了路边的感觉。麦迪逊大道是各种奢侈品店，第五大道上的店便宜一点。恩恩，我都逛了。恩恩，我给自己买了一件优衣库的衣服。纽约，好像100美金以下的衣服是不收税的。然而，优衣库的衣服还是没有淘宝的官方旗舰店卖的便宜。我买的这件衣服是我纽约之行给自己的唯一的礼物。我很珍惜呢~<br>对了，第五大道上的Tiffany四楼开了Tiffany餐厅。有早餐、午餐和下午茶，梦幻的不行，而且价格也不贵（依稀记得都在50美刀以内）。窗外可以看到中央公园哦！所有的美女们都值得拥有！</p>
<h3 id="小感悟-1"><a href="#小感悟-1" class="headerlink" title="小感悟"></a>小感悟</h3><p><strong>（如果只是纯想捞攻略干货，请忽略这一part）</strong><br>那天真正实现了累瘫。没有感悟。由于我住在曼哈顿中城区，所以。。我是走着去这些地方的。走了一天。在纽约，平均每天走20000步。请大家一定要穿一双好点儿的鞋走。</p>
<h2 id="Day-5-二刷MET-自然博物馆-中央公园-中央车站"><a href="#Day-5-二刷MET-自然博物馆-中央公园-中央车站" class="headerlink" title="Day 5: 二刷MET + 自然博物馆 + 中央公园 + 中央车站"></a>Day 5: 二刷MET + 自然博物馆 + 中央公园 + 中央车站</h2><p>二刷MET就没有什么更多的tips要传授了。</p>
<h3 id="自然博物馆（不要去）"><a href="#自然博物馆（不要去）" class="headerlink" title="自然博物馆（不要去）"></a>自然博物馆（不要去）</h3><p>自然博物馆。。真的是。。别去就对了。。很失望的说。。<br>你在博物馆奇妙夜里看到的一切，都是电影拍的。和这个自然博物馆没有什么联系。里面就是一些关于各个大洲的很古旧的标本。刚刚进去的时候，看到一个巨型的恐龙骨架，还被标注说是侏罗纪公园摄制组送的，你可能会很开心，觉得里面别有洞天然而。。里面就是很古旧的标本。甚至展厅内某些展示架的灯都是坏的。和它隔着一个中央公园遥相对望的MET比起来。那就别比了，没啥好比的。里面好不容易有一些精彩的项目，比如蝴蝶谷（也就是有各种飞舞的蝴蝶在一个温室花房里），还要额外收钱。算了，别去就好了。</p>
<center><br><img src="/2018/05/04/newyork-trip/zrbwg.JPG" width="60%" height="60%" alt="自然博物馆"><br>Fig12: 自然博物馆入口的来自侏罗纪公园的恐龙骨架<br></center>

<h3 id="中央公园"><a href="#中央公园" class="headerlink" title="中央公园"></a>中央公园</h3><p>中央公园，你估计在各种电影里面都看过。在寸土寸金的纽约中间开拓这么一大片绿地建立公园也是非常神奇的存在。它直接抬高了公园周围的房价。公园特别大，千万不要想靠双脚征服。找一个晴好的天，到公园里面骑个自行车，坐个马车，或者求个婚真真是极好的。<strong>但是，晚上千万就别来了。据说入夜会有各种流浪汉或者不正当交易发生于此（有小伙伴纠正我说，中央公园是有关门时间的，过时间抓到是会被罚款的）。</strong>中央公园，一年四季都有美景。你可能看过世界上许多唯美的公园，这个可能不是最稀奇的。但是，应该是当代文明中最昂贵的。</p>
<center><br><img src="/2018/05/04/newyork-trip/zygy.JPG" width="60%" height="60%" alt="中央公园"><br>Fig13: 春意盎然的中央公园<br></center>

<h3 id="中央车站"><a href="#中央车站" class="headerlink" title="中央车站"></a>中央车站</h3><p>晚饭后，我们决定步行到中央车站。这就是住在中城区的好处，到哪里都能步行。中央车站，经典、著名、壮观，里面还有荷枪实弹的美国士兵把守，只管放心体验！车站内部的天花板还是绚烂的星座图，总之这个车站你特意参观或是换乘的时候特意拍照都是非常美滴。</p>
<center><br><img src="/2018/05/04/newyork-trip/zycz.JPG" width="60%" height="60%" alt="中央车站"><br>Fig13: 中央车站<br></center>

<h2 id="Day-6-MET-The-Cloisters-museum（大都会修道院分馆）-强推！！-帝国大厦顶楼-洛克菲勒中心顶楼"><a href="#Day-6-MET-The-Cloisters-museum（大都会修道院分馆）-强推！！-帝国大厦顶楼-洛克菲勒中心顶楼" class="headerlink" title="Day 6: MET The Cloisters museum（大都会修道院分馆）(强推！！) + 帝国大厦顶楼 + 洛克菲勒中心顶楼"></a>Day 6: MET The Cloisters museum（大都会修道院分馆）(强推！！) + 帝国大厦顶楼 + 洛克菲勒中心顶楼</h2><h3 id="The-MET-Cloisters-museum（大都会修道院分馆）（大约逛了2-3hr"><a href="#The-MET-Cloisters-museum（大都会修道院分馆）（大约逛了2-3hr" class="headerlink" title="The MET Cloisters museum（大都会修道院分馆）（大约逛了2-3hr)"></a>The MET Cloisters museum（大都会修道院分馆）（大约逛了2-3hr)</h3><p>最后一天的时候，我们选择去了 MET The Cloisters museum，坐落在曼哈顿的上城区的很上面的地方。我们依据Google的指导，选择乘坐地铁前往。下地铁的时候，直接觉得自己走错了。和之前看到的景象不同，The Cloisters museum 坐落在一座非常美丽的河畔公园，崔恩堡公园（Fort Tryon Park）里面。公园毗邻哈德逊河，还可以看到华盛顿大桥。</p>
<center><br><img src="/2018/05/04/newyork-trip/hsddq.JPG" width="60%" height="60%" alt="华盛顿大桥"><br>Fig14: 华盛顿大桥<br></center>

<p>修道院博物馆充分的体现了城会玩儿的精神（严肃的说，体现了富豪的慷慨和对于人类艺术的贡献）。崔恩堡公园是洛克菲勒家族为了保留中世纪修道院的草木葱葱的感觉，特意买下土地建造的。为得是大家能够在置身艺术馆的时候感同身受的身处欧洲修道院的感觉。洛克菲勒甚至还考虑到了窗外的景象。买下了河对岸新泽西州的一片土地，不许开发，只能建造成同样草木森森的公园。这样，身处修道院博物馆中，就能感受到中世纪修道院的自然、庄重、森严。让整座修道院以这种形式和纽约融合。修道院博物馆比MET要小得多，但是主题鲜明突出。里面收藏着许多难得的具有宗教色彩的艺术珍品。<strong>建议去之前，阅读一下修道院博物馆的简介</strong>，置身其中的时候会有更多体会。修道院建筑本身也是一个珍品。里面有三座中庭花园，宁静美丽。长长的回廊和有宗教壁画的窗，严肃的圣人雕塑都让人着迷。</p>
<center><br><img src="/2018/05/04/newyork-trip/xdyw.jpg" width="60%" height="60%" alt="修道院外"><br>Fig15: 从公园远眺修道院<br></center><br><center><br><img src="/2018/05/04/newyork-trip/hl.JPG" width="60%" height="60%" alt="回廊"><br>Fig16: 修道院内的一条回廊<br></center><br><center><br><img src="/2018/05/04/newyork-trip/zt.JPG" width="60%" height="60%" alt="中庭"><br>Fig17: 修道院内的一座中庭花园<br></center>

<h3 id="洛克菲勒中心（登顶后约花费30分钟游览）-帝国大厦顶楼（登顶后约花费30分钟游览）"><a href="#洛克菲勒中心（登顶后约花费30分钟游览）-帝国大厦顶楼（登顶后约花费30分钟游览）" class="headerlink" title="洛克菲勒中心（登顶后约花费30分钟游览） + 帝国大厦顶楼（登顶后约花费30分钟游览）"></a>洛克菲勒中心（登顶后约花费30分钟游览） + 帝国大厦顶楼（登顶后约花费30分钟游览）</h3><p>洛克菲勒中心坐落在纽约中城区，相对着的是纽约最大的教堂，圣帕特里克教堂。同样，我们是使用Explorer pass登顶的。如果大家有计划去，<strong>那么必须先地点去换取票</strong>，票上会有登顶时间。到点了，回来持票乘坐电梯登顶就好了。洛克菲勒中心比较好的地方，就是可以从这个上面俯瞰中央公园全貌。<strong>建议大家白天登顶洛克菲勒中心（俗称the Rock，中文名：峭石之巅）。</strong> PS: 洛克菲勒中心眺望中央公园那一面，已经有建筑物越建越高，可以挡住中央公园的部分景观了，所以大家期待也不要太高。</p>
<center><br><img src="/2018/05/04/newyork-trip/lkfl.JPG" width="60%" height="60%" alt="洛克菲勒中心"><br>Fig18: 洛克菲勒中心<br></center><br><center><br><img src="/2018/05/04/newyork-trip/djt.JPG" width="60%" height="60%" alt="圣帕特里克教堂"><br>Fig19: 圣帕特里克教堂<br></center><br>帝国大厦，各种电影里都看过~如果想看金刚欣赏过的风景，那么当然值得上去。<strong>建议大家在晚上登顶</strong>，可以饱览纽约的夜景。这座一百多层的建筑，登到最顶是要加收票价的。Explorer pass只能够登到80多层左右。如果在旅游旺季和人数多的时候，队伍长起来，可以绕大厦一圈，所以建议有个心理准备。作为纽约地标性建筑，就算不登顶，也应该路过拍个照的。<br><br><center><br><img src="/2018/05/04/newyork-trip/dgds.JPG" width="60%" height="60%" alt="帝国大厦顶"><br>Fig19: 帝国大厦顶向外眺望<br></center>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>纽约，城市文明的顶配所在。自然可以游玩的地方还有许许多多。曾经在教科书、电影、书籍上面看过许许多多的各种角度的纽约。自然是值得游览的地方。虽然这次呆的时间可以说是很长，但是这个城市还有许许多多值得却没有逛到的地方。比如说，古根海姆博物馆、布鲁克林大桥、华盛顿广场、woodbury outlet etc..有机会下次还是要去的。总结比较精华的经验如下：</p>
<ul>
<li>住：曼哈顿中城区</li>
<li>行：靠地铁和bus，当然坐计程车也是好的，就是堵而且贵</li>
<li>我认为合适的行程安排：<ul>
<li>下城区一天：自由女神像 + 华尔街 + 三一教堂 + 911纪念馆 + 世贸中心 + 布鲁克林大桥（可以选择看黄昏或者夜景）</li>
<li>中城区一天：中央公园 + 第五大道 + 麦迪逊大道 + 帝国大厦 + 洛克菲勒中心</li>
<li>博物馆两天：MET (中央公园旁边的主馆 + 修道院分馆)</li>
<li>MoMA只需要半天</li>
<li>其他散落的景点，可以交叉在逛主要景点的其中完成</li>
</ul>
</li>
</ul>
<p>当然，如果去纽约非曼哈顿以外的别的地方，我是不了解的~不过期待以后再有机会了解。<br>这篇攻略就这样吧，有疑问请留言，或者直接问我吧。（写得要累死了。。还好这篇没有被拖延癌扼杀 :p）</p>
]]></content>
      
        <categories>
            
            <category> 游记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 旅行攻略 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[微信小程序（1）]]></title>
      <url>/2017/09/04/wechatapp1/</url>
      <content type="html"><![CDATA[<p>#小打卡微信小程序学习日#</p>
<p>若需快速建立一个微信小程序，直接点击:<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/" target="_blank" rel="external">https://mp.weixin.qq.com/debug/wxadoc/dev/</a>。微信公众平台在这里写好了第一个小程序的code，直接复制粘贴即可试水。</p>
<p>强撑我是一个程序媛的尊严，决定写一些东西深度理解一下微信小程序。今天是理解小程序的第一天，了解了一下微信小程序基本构架。</p>
<p>从大框架看，我们先把一众小程序文件结构分类。如网上一众可以找到的小程序开发博客所总结的那样，小程序的主体文件由一下的文件组成：<br><table class="table">
<thead>
<tr>
<th style="text-align:center">name</th>
<th style="text-align:center">usage</th>
<th style="text-align:center">necessary</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">app.js</td>
<td style="text-align:center">控制整个小程序的逻辑</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">app.json</td>
<td style="text-align:center">对整个小程序做设置</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">app.wxss</td>
<td style="text-align:center">对整个小程序的页面/框架做装饰</td>
<td style="text-align:center">NO</td>
</tr>
</tbody>
</table>
<br>那么，全局设置好了之后呢，具体到每一个页面的内容，就需要下面的这些文件了：<br><table class="table">
<thead>
<tr>
<th style="text-align:center">suffix</th>
<th style="text-align:center">usage</th>
<th style="text-align:center">necessary</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">js</td>
<td style="text-align:center">主管页面逻辑（它可以让你的这个页面活起来，是你赋予你程序的大脑）</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">wxml</td>
<td style="text-align:center">可以看做&quot;微信ml&quot;,类似html作用，调控页面结构</td>
<td style="text-align:center">YES</td>
</tr>
<tr>
<td style="text-align:center">wxss</td>
<td style="text-align:center">看做&quot;微信ss&quot;,类似css作用，装饰页面</td>
<td style="text-align:center">NO</td>
</tr>
<tr>
<td style="text-align:center">json</td>
<td style="text-align:center">负责页面配置，configuration file</td>
<td style="text-align:center">NO</td>
</tr>
</tbody>
</table>
<br>对于以上的这四类文件，你做的每一个页面的这四个文件都需要放在同一个文件夹内，并且文件名前缀要和文件夹名字一致。比如说，你如果有个页面记录log, 那么就有个folder叫log，里面所有的文件都是log.js, log.wxss, etc.</p>
]]></content>
      
        <categories>
            
            <category> wechatapp </category>
            
        </categories>
        
        
        <tags>
            
            <tag> wechatapp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[人生长恨水长东]]></title>
      <url>/2017/09/02/changhenge/</url>
      <content type="html"><![CDATA[<p>#打卡今年读完的一本书，王安忆的《长恨歌》#<br>今天开始，用git写自己的小博客。在reading list这个tag里面，记录的就是自己读过的书。</p>
<p>许多人都说，王安忆的笔法，宛如当年的张爱玲，有仿照之嫌疑。不怕笑话，我并没有读过张爱玲的小说。所以，在此，不做比较文学。依据本人粗浅的看法，长恨歌，还是很值得一读的。</p>
<ol>
<li><p>刚刚翻开本书的时候，就被王安忆描述的旧时候的上海所深深吸引。到过上海许多次，见过上海许多次，听过上海许多次，然而，一切都不似王安忆笔下的上海。对于十里洋场，我们有着大印象。面对着历史的滚滚洪流，她是一个风情万种的女子，无论如何被裹挟，永远一丝不乱，有条不紊。然而，在长恨歌里面，我感觉我走入了上海的内心。弄堂里，黄浦江边，角角落落，都是这个名叫上海的女子成长的印记。如果你真的如作者一般，了解了那些角落，如果你真的如作者版观察入微，你会看到上海，卸妆后的满面沧桑，也会看到上海青丝间被隐藏的白发。你会明白她，会了解她。知微见著，恍然大悟。</p>
</li>
<li><p>有的书评里面，觉得王安忆小家子气，写的满满都是男女的浅浅情爱，似乎把人生就这么局限于情爱。然而，我却觉得作者有大家风范。胭脂泪，相留醉，几时重？自是人生长恨水长东。本书名为《长恨歌》，主旨写的就是情爱。芸芸众生，大部分的人，都是蝇营狗苟，忙忙碌碌。在本书中，作者非常贴切的写着中国局部地区的某些人某些时期的众生相。笔法细腻，耐人寻味。在王琦瑶一生中的各个转折点，遇到的各个人物，都可以是一类人的缩影。看过许多书，个体和个体之间都非常的分明。然而，事实上，我觉得人和人之间都有类似。能够精准的把类似点归结出来，塑造出人物就是很了不起的事情。无论说作者有无许多佳作，从这一点出发，我觉得此文堪称佳作。</p>
</li>
<li><p>可能是我自身的文学修养和人生阅历有限，本文中，人物最终为何会发展到最后的悲惨结局，我一直都没有想明白。一个女人，最开始有及其优越的条件，好比当今的香港小姐季军。年轻貌美，有学问和品位。可以是因为虚荣，第一步就没有走好，给人做了小。然后呢，又因不甘寂寞的重回上海滩。这个人生跟头摔的还不够大吗？多少青春好年华就这样不复返了，难道还不足以成长，明白自己所求吗？偏又和软骨头的男人纠缠不清，还不需要别人负责的养大孩子。最后，养大的也不像是亲生女儿，而是一对争宠的姊妹。老了老了，还把关系搞的乱七八糟，且不甘寂寞的和各色人物来来往往最后招来杀身之祸。看完小说，觉得女主不会成长的样子，貌似也不符合最初对于她的人设。当然，长了这么大，我慢慢觉得，我的世界观很多时候都不足以概括世界和理解世界。所以，在这里就是写一点这个困惑。如果有朝一日回看今日之困惑，可能会恍然大悟吧。</p>
</li>
</ol>
<p>总之，本书，值得一读。</p>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Reading List </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello All]]></title>
      <url>/2017/09/02/hello/</url>
      <content type="html"><![CDATA[<p>Starting from today, I hope that I can keep this blog alive.<br>I am going to post the following things:</p>
<ol>
<li>Statistic<br> – statistical models<br> – statistical concepts</li>
<li>Computing science<br> – computing science skills<br> – computing science algorithms</li>
<li>reading list<br> – Some reviews and comments about the books I read.</li>
</ol>
]]></content>
      
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[categories]]></title>
      <url>/categories/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
